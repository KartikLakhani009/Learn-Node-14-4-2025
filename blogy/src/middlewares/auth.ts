import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';
import { AuthRequest, JwtPayload } from '../types/user';
import { env } from '../config/env';

// JWT secret key (should be in environment variables in production)
const JWT_SECRET = env.JWT_SECRET;

// Middleware to verify JWT token for protected API routes
export const verifyToken = (req: Request, res: Response, next: NextFunction) => {
  const authHeader = req.headers.authorization;
  const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN

  if (!token) {
    res.status(401).json({ message: 'Access denied. No token provided.' });
    return;
  }

  try {
    const decoded = jwt.verify(token, JWT_SECRET) as JwtPayload;
    (req as AuthRequest).user = decoded;
    next();
  } catch (error) {
    res.status(403).json({ message: 'Invalid token.' });
    return;
  }
};

// Middleware for protecting web routes (SSR)
export const isAuthenticated = (req: Request, res: Response, next: NextFunction) => {
  const token = req.cookies?.token || '';

  if (!token) {
    // Store the requested URL to redirect back after login
    res.locals.returnTo = req.originalUrl;
    return res.redirect('/auth/login');
  }

  try {
    const decoded = jwt.verify(token, JWT_SECRET) as JwtPayload;
    (req as AuthRequest).user = decoded;
    // Make user info available to all views
    res.locals.user = decoded;
    next();
  } catch (error) {
    // Clear invalid cookie and redirect to login
    res.clearCookie('token');
    return res.redirect('/auth/login');
  }
};

// Middleware to check if user is already logged in (for login/signup pages)
export const isNotAuthenticated = (req: Request, res: Response, next: NextFunction) => {
  const token = req.cookies?.token || '';

  const user = res?.locals?.user ?? null;
  console.log('isNotAuthenticated user', user);

  if (token) {
    try {
      jwt.verify(token, JWT_SECRET);
      if(user) {
        // Redirect to home if already authenticated
        res.redirect('/');
        return;
      }else{
        // Decode token to get user info
        const decoded = jwt.verify(token, JWT_SECRET) as JwtPayload;
        console.log('isNotAuthenticated decoded', decoded);
        (req as AuthRequest).user = decoded;
        // Make user info available to all views
        res.locals.user = decoded;
        // Set the returnTo path to the home page
        res.locals.returnTo = '/';
        res.redirect('/');
        
      }
      return;
    } catch (error) {
      // Token is invalid, clear it
      res.clearCookie('token');
    }
  }
  
  next();
};

// Generated by Copilot
// Middleware to check for JWT token and set user info in res.locals for all routes
export const checkAuthStatus = (req: Request, res: Response, next: NextFunction) => {
  const token = req.cookies?.token || '';
  
  if (token) {
    try {
      const decoded = jwt.verify(token, JWT_SECRET) as JwtPayload;
      (req as AuthRequest).user = decoded;
      res.locals.user = decoded;
    } catch (error) {
      // Invalid token, clear it
      res.clearCookie('token');
      res.locals.user = null;
    }
  } else {
    res.locals.user = null;
  }
  
  next();
};