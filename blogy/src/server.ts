import express from 'express';
import path from 'path';
import cookieParser from 'cookie-parser';
import ejsLayouts from 'express-ejs-layouts';
import { connectDB } from './utils/db';
import authRoutes from './routes/auth';
import apiAuthRoutes from './routes/api-auth';
import { checkAuthStatus } from './middlewares/auth'; // Import the new middleware

import { env } from './config/env';

// Connect to MongoDB
connectDB().catch(err => {
  console.error('Failed to connect to MongoDB', err);
  process.exit(1);
});

const app = express();
const PORT = env.PORT || 3000;

// Middleware setup
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());

// Add checkAuthStatus middleware to all routes
// Generated by Copilot
app.use(checkAuthStatus);

// Static files
app.use(express.static(path.join(__dirname, '../public')));
app.use('/uploads', express.static(path.join(__dirname, '../uploads')));

// View engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');
app.use(ejsLayouts);
app.set('layout', 'layout');

// Routes
app.use('/auth', authRoutes);
app.use('/api/auth', apiAuthRoutes);

// Home route
app.get('/', (req, res) => {
  console.log('Home route accessed --> res.locals.user', res.locals.user);
  res.render('home', { 
    pageTitle: 'Home',
    user: res.locals.user || null
  });
});

// About page route
app.get('/about', (req, res) => {
  res.render('about', { 
    pageTitle: 'About Us',
    user: res.locals.user || null
  });
});

// Privacy page route
app.get('/privacy', (req, res) => {
  res.render('privacy', { 
    pageTitle: 'Privacy Policy',
    user: res.locals.user || null
  });
});

// 404 handler
app.use((req, res) => {
  if(req.path.includes('/api/')) {
    res.status(404).json({ message: 'Not Found' });
    return;
  }
  res.status(404).render('404', { 
    pageTitle: 'Page Not Found',
    user: res.locals.user || null
  });
});

// Error handler
app.use((err: Error, req: express.Request, res: express.Response, next: express.NextFunction) => {
  console.error(err);
  res.status(500).render('error', { 
    pageTitle: 'Error', 
    error: process.env.NODE_ENV === 'development' ? err : {}, 
    user: res.locals.user || null
  });
});

app.listen(PORT, () => {
  console.log(`ðŸš€ Server running on http://localhost:${PORT}`);
});